Sure, let's break down the algorithm for converting a valid infix expression to a postfix expression. The algorithm uses a stack data structure to help with the conversion.

**Algorithm: Infix to Postfix Conversion**

1. Initialize an empty stack to store operators.
2. Scan the infix expression from left to right.
3. For each character in the infix expression:
   a. If it's an operand (an alphanumeric character), add it to the postfix expression.
   b. If it's an opening parenthesis '(', push it onto the stack.
   c. If it's a closing parenthesis ')', pop operators from the stack and add them to the postfix expression until an opening parenthesis '(' is encountered. Pop and discard the '('.
   d. If it's an operator (+, -, *, /):
      i. Pop and add operators from the stack to the postfix expression until an operator with lower precedence or an opening parenthesis '(' is encountered.
      ii. Push the current operator onto the stack.
4. After scanning the entire infix expression, pop any remaining operators from the stack and add them to the postfix expression.
5. The resulting expression on the stack is the postfix expression.

**Example:**

Let's take the infix expression `A + B * C - D / E`.

1. Start with an empty stack and an empty postfix expression.
2. Scan the infix expression:
   - `A` (operand) is added to the postfix expression.
   - `+` (operator) is pushed onto the stack.
   - `B` (operand) is added to the postfix expression.
   - `*` (operator) has higher precedence than '+', so push it onto the stack.
   - `C` (operand) is added to the postfix expression.
   - `-` (operator) has lower precedence than '*', so pop '*' from the stack and add it to the postfix expression. Then push '-' onto the stack.
   - `D` (operand) is added to the postfix expression.
   - `/` (operator) has equal precedence with '-', so pop '-' from the stack and add it to the postfix expression. Then push '/' onto the stack.
   - `E` (operand) is added to the postfix expression.
3. After scanning the entire infix expression, pop remaining operators from the stack and add them to the postfix expression. In this case, pop '/' and add it to the postfix expression.
4. The final postfix expression is `A B C * + D E / -`.

This algorithm ensures that the postfix expression preserves the correct order of operations. The stack helps in managing the operators based on their precedence.
