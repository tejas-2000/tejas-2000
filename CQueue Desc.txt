Certainly! Here's a step-by-step algorithm for implementing insert, delete, and display operations on a circular queue:

1. **Initialize Circular Queue:**
   - Set `front` and `rear` to -1.

2. **Check if the Queue is Full (isFull):**
   - If `(front == (rear + 1) % MAX_SIZE)`, the queue is full.

3. **Check if the Queue is Empty (isEmpty):**
   - If `(front == -1)`, the queue is empty.

4. **Insert Operation:**
   - If the queue is full, print an error message.
   - If the queue is empty, set `front` to 0.
   - Increment `rear` using the circular formula: `rear = (rear + 1) % MAX_SIZE`.
   - Set `items[rear]` to the new value.

5. **Delete Operation:**
   - If the queue is empty, print an error message.
   - Store the value at `items[front]` in a variable (for later display).
   - If `front` is equal to `rear`, this is the last element; reset `front` and `rear` to -1.
   - Otherwise, increment `front` using the circular formula: `front = (front + 1) % MAX_SIZE`.
   - Print the deleted value.

6. **Display Operation:**
   - If the queue is empty, print an appropriate message.
   - Iterate from `front` to `(rear + 1) % MAX_SIZE` using the circular formula.
   - Print each element.

7. **Main Program Loop:**
   - Display a menu to the user with options for insert, delete, display, and exit.
   - Based on the user's choice, call the corresponding operation function.

8. **Exit Program:**
   - If the user chooses to exit, end the program.

Here's a pseudocode representation of the algorithm:

```plaintext
function initializeCircularQueue(queue):
    queue.front = -1
    queue.rear = -1

function isFull(queue):
    return (queue.front == (queue.rear + 1) % MAX_SIZE)

function isEmpty(queue):
    return (queue.front == -1)

function insert(queue, value):
    if isFull(queue):
        print "Queue is full. Cannot insert value."
    else:
        if isEmpty(queue):
            queue.front = 0
        queue.rear = (queue.rear + 1) % MAX_SIZE
        queue.items[queue.rear] = value
        print "Inserted value into the queue."

function delete(queue):
    if isEmpty(queue):
        print "Queue is empty. Cannot delete."
    else:
        deletedValue = queue.items[queue.front]
        if queue.front == queue.rear:
            initializeCircularQueue(queue)
        else:
            queue.front = (queue.front + 1) % MAX_SIZE
        print "Deleted", deletedValue, "from the queue."

function display(queue):
    if isEmpty(queue):
        print "Queue is empty."
    else:
        print "Queue elements: "
        i = queue.front
        while i != (queue.rear + 1) % MAX_SIZE:
            print queue.items[i]
            i = (i + 1) % MAX_SIZE

function main():
    initializeCircularQueue(queue)
    loop:
        displayMenu()
        read userChoice
        switch userChoice:
            case 1:
                read value
                insert(queue, value)
            case 2:
                delete(queue)
            case 3:
                display(queue)
            case 4:
                exit program
            default:
                print "Invalid choice. Please enter a valid option."

```

Note: You need to replace `print` with the appropriate output statements for the language you are using (e.g., `printf` in C). Additionally, `MAX_SIZE` is assumed to be a constant representing the maximum size of the circular queue.
